// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GameCalculating extends ethereum.Event {
  get params(): GameCalculating__Params {
    return new GameCalculating__Params(this);
  }
}

export class GameCalculating__Params {
  _event: GameCalculating;

  constructor(event: GameCalculating) {
    this._event = event;
  }
}

export class GameEnded extends ethereum.Event {
  get params(): GameEnded__Params {
    return new GameEnded__Params(this);
  }
}

export class GameEnded__Params {
  _event: GameEnded;

  constructor(event: GameEnded) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GameStarted extends ethereum.Event {
  get params(): GameStarted__Params {
    return new GameStarted__Params(this);
  }
}

export class GameStarted__Params {
  _event: GameStarted;

  constructor(event: GameStarted) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get interval(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlayerAddedBalance extends ethereum.Event {
  get params(): PlayerAddedBalance__Params {
    return new PlayerAddedBalance__Params(this);
  }
}

export class PlayerAddedBalance__Params {
  _event: PlayerAddedBalance;

  constructor(event: PlayerAddedBalance) {
    this._event = event;
  }

  get gameId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get addedBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currentBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PlayerJoined extends ethereum.Event {
  get params(): PlayerJoined__Params {
    return new PlayerJoined__Params(this);
  }
}

export class PlayerJoined__Params {
  _event: PlayerJoined;

  constructor(event: PlayerJoined) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalPlayers(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Raffle__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class Raffle extends ethereum.SmartContract {
  static bind(address: Address): Raffle {
    return new Raffle("Raffle", address);
  }

  checkUpkeep(param0: Bytes): Raffle__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new Raffle__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<Raffle__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Raffle__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositedBalance(): BigInt {
    let result = super.call(
      "getDepositedBalance",
      "getDepositedBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDepositedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositedBalance",
      "getDepositedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntryFee(): BigInt {
    let result = super.call("getEntryFee", "getEntryFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getEntryFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEntryFee", "getEntryFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastTimeStamp(): BigInt {
    let result = super.call(
      "getLastTimeStamp",
      "getLastTimeStamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastTimeStamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastTimeStamp",
      "getLastTimeStamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastWinner(): Address {
    let result = super.call("getLastWinner", "getLastWinner():(address)", []);

    return result[0].toAddress();
  }

  try_getLastWinner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLastWinner",
      "getLastWinner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRaffleState(): i32 {
    let result = super.call("getRaffleState", "getRaffleState():(uint8)", []);

    return result[0].toI32();
  }

  try_getRaffleState(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getRaffleState",
      "getRaffleState():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTotalBalance(): BigInt {
    let result = super.call(
      "getTotalBalance",
      "getTotalBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBalance",
      "getTotalBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPlayers(): BigInt {
    let result = super.call(
      "getTotalPlayers",
      "getTotalPlayers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalPlayers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPlayers",
      "getTotalPlayers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vrfCoordinatorV2(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get keyHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get interval(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get callbackGasLimit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddBalanceCall extends ethereum.Call {
  get inputs(): AddBalanceCall__Inputs {
    return new AddBalanceCall__Inputs(this);
  }

  get outputs(): AddBalanceCall__Outputs {
    return new AddBalanceCall__Outputs(this);
  }
}

export class AddBalanceCall__Inputs {
  _call: AddBalanceCall;

  constructor(call: AddBalanceCall) {
    this._call = call;
  }
}

export class AddBalanceCall__Outputs {
  _call: AddBalanceCall;

  constructor(call: AddBalanceCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartNewGameCall extends ethereum.Call {
  get inputs(): StartNewGameCall__Inputs {
    return new StartNewGameCall__Inputs(this);
  }

  get outputs(): StartNewGameCall__Outputs {
    return new StartNewGameCall__Outputs(this);
  }
}

export class StartNewGameCall__Inputs {
  _call: StartNewGameCall;

  constructor(call: StartNewGameCall) {
    this._call = call;
  }
}

export class StartNewGameCall__Outputs {
  _call: StartNewGameCall;

  constructor(call: StartNewGameCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
